// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: inbox.sql

package feeddb

import (
	"context"

	uuid "github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const getInboxEvent = `-- name: GetInboxEvent :one
select
  event_id,
  source_service,
  event_type,
  aggregate_type,
  aggregate_id,
  payload,
  received_at,
  processed_at,
  last_error
from feed.inbox_events
where event_id = $1
`

func (q *Queries) GetInboxEvent(ctx context.Context, eventID uuid.UUID) (FeedInboxEvent, error) {
	row := q.db.QueryRow(ctx, getInboxEvent, eventID)
	var i FeedInboxEvent
	err := row.Scan(
		&i.EventID,
		&i.SourceService,
		&i.EventType,
		&i.AggregateType,
		&i.AggregateID,
		&i.Payload,
		&i.ReceivedAt,
		&i.ProcessedAt,
		&i.LastError,
	)
	return i, err
}

const insertInboxEvent = `-- name: InsertInboxEvent :exec
insert into feed.inbox_events (
  event_id,
  source_service,
  event_type,
  aggregate_type,
  aggregate_id,
  payload,
  received_at
)
values ($1, $2, $3, $4, $5, $6, coalesce($7, now()))
on conflict (event_id) do nothing
`

type InsertInboxEventParams struct {
	EventID       uuid.UUID   `json:"event_id"`
	SourceService string      `json:"source_service"`
	EventType     string      `json:"event_type"`
	AggregateType pgtype.Text `json:"aggregate_type"`
	AggregateID   pgtype.Text `json:"aggregate_id"`
	Payload       []byte      `json:"payload"`
	Column7       interface{} `json:"column_7"`
}

func (q *Queries) InsertInboxEvent(ctx context.Context, arg InsertInboxEventParams) error {
	_, err := q.db.Exec(ctx, insertInboxEvent,
		arg.EventID,
		arg.SourceService,
		arg.EventType,
		arg.AggregateType,
		arg.AggregateID,
		arg.Payload,
		arg.Column7,
	)
	return err
}

const markInboxProcessed = `-- name: MarkInboxProcessed :exec
update feed.inbox_events
set processed_at = coalesce($2, now()),
    last_error   = null
where event_id = $1
`

type MarkInboxProcessedParams struct {
	EventID     uuid.UUID          `json:"event_id"`
	ProcessedAt pgtype.Timestamptz `json:"processed_at"`
}

func (q *Queries) MarkInboxProcessed(ctx context.Context, arg MarkInboxProcessedParams) error {
	_, err := q.db.Exec(ctx, markInboxProcessed, arg.EventID, arg.ProcessedAt)
	return err
}

const recordInboxError = `-- name: RecordInboxError :exec
update feed.inbox_events
set last_error = $2
where event_id = $1
`

type RecordInboxErrorParams struct {
	EventID   uuid.UUID   `json:"event_id"`
	LastError pgtype.Text `json:"last_error"`
}

func (q *Queries) RecordInboxError(ctx context.Context, arg RecordInboxErrorParams) error {
	_, err := q.db.Exec(ctx, recordInboxError, arg.EventID, arg.LastError)
	return err
}
